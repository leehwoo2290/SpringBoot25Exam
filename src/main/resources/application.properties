##톰켓 관련 설정 및 데이베이스 관련 설정
spring.application.name=board


##http://192.168.111.105:80
server.port=8000

##로그 출력 설정
logging.level.org.springframework=info
logging.level.org.mbc=debug

##데이터베이스 1,2단계 설정
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/bootex
spring.datasource.username=bootuser
spring.datasource.password=bootuser

##jpa 관련 설정 추가(jpa : orm에서 시작되었다.) 데이터베이스도 객체형으로 보자

## @Entity와 관련된 코드
spring.jpa.hibernate.ddl-auto=update
##update : 기존과 다른 테이블이 변경되면 drop 후 create 한다.
##none : 테이블 구조를 변경하지 않는다.
##create : 실행할 때마다 테이블을 새로 만든다.
##create-drop : 실행할 때 테이블을 새로 만들고 종료할 때 drop
##validate : 변경된 부분만 콘솔만 알려줌(구조 변경 안 함)
spring.jpa.properties.hibernate.format_sql=true
##콘솔에 sql 쿼리문을 보여줌
spring.jpa.show-sql=true
##jpa가 하는 일을 보여줌

##CREATE DATABASE `bootex` /*!40100 COLLATE 'utf8_general_ci' */;
#SHOW DATABASES;

##CREATE USER 'bootuser'@'%' IDENTIFIED BY 'bootuser';
#GRANT USAGE ON *.* TO 'bootuser'@'%';
#GRANT EXECUTE, SELECT, SHOW VIEW, ALTER, ALTER ROUTINE, CREATE, CREATE ROUTINE, CREATE TEMPORARY TABLES, CREATE VIEW, DELETE, DROP, EVENT, INDEX, INSERT, REFERENCES, TRIGGER, UPDATE, LOCK TABLES  ON `bootex`.* TO 'bootuser'@'%' WITH GRANT OPTION;
#FLUSH PRIVILEGES;


## p597 첨부파일 관리용 코드 추가
spring.servlet.multipart.enabled=true
## 파일업로드용 서블릿 동작 활성화
## spring.servlet.multipart.location=//mbc//upload
spring.servlet.multipart.location=c:\\upload
## 파일저장위치 지정 (리눅스에 배포시 변경필수)
spring.servlet.multipart.max-file-size=10MB
## 업로드 파일 최대 용량
spring.servlet.multipart.max-request-size=30MB

org.mbc.upload.path=c:\\upload
## org.mbc.upload.path=//mbc//upload
## 패키지 변경시 경로 확인(수정필수)
## java에서 사용될 경로


## 스프링 시큐리티 부분 추가 설정 p681
logging.level.org.springframework.security=trace
## 로그분석
## DisableEncodeUrlFilter(1/10)
# : 세션 ID가 URL에 포함되는 것을 막기 위해 HttpServletResponse를 사용해서 URL이 인코딩 되는 것을 막기 위한 필터이다.

## WebAsyncManagerIntegrationFilter (2/10)
# : SpringSecurityContextHolder는 기본적으로 ThreadLocal 기반으로 동작하는데,
#   비동기와 관련된 기능을 쓸 때에도 SecurityContext를 사용할 수 있도록 만들어주는 필터이다.

## SecurityContextHolderFilter (3/10)
# : SecurityContext가 없으면 만들어주는 필터이다.
#   SecurityContext는 Authentication(인증) 객체를 보관하는 인터페이스이다.
#   SecurityContext를 통해 한 요청에 대해서 어떤 필터에서도 같은 Authentication(인증) 객체를 사용할 수 있다.

## HeaderWriterFilter (4/10)
# : 응답헤더에 Security와 관련된 헤더 값을 설정해주는 필터이다

## CsrfFilter (5/10)
# : CSRF 공격을 방어하기 위한 설정을 하는 필터이다.
#   CSRF (Cross-Site Request Forgery, 크로스 사이트 요청 위조)는 웹 보안 취약점 중 하나로,
#   사용자가 자신의 의지와는 무관하게 공격자가 의도한 요청을 특정 웹사이트에 보내도록 유도하는 공격입니다.
#   즉, 공격자가 악성 코드를 심은 웹페이지나 이메일 등을 통해 사용자가 로그인된 상태에서 원하지 않는 작업을 수행하도록 속이는 것입니다

## LogoutFilter (6/10)
# : 로그아웃 요청을 처리하는 필터이다.  아래에 DefaultLogoutPageGeneratingFilter가 로그아웃 기본 페이지를 생성한다.
#   Did not match request to Ant [pattern='/logout', POST]

## Invoking RequestCacheAwareFilter (7/10)
# : 인증 처리 후 원래의 Request 정보로 재구성하는 필터이다.

## Invoking SecurityContextHolderAwareRequestFilter (8/10)
# : 서블릿 API 보안 메서드를 구현하는 요청 래퍼로 서블릿 요청을 채우는 필터이다.

## AnonymousAuthenticationFilter (9/10)
# : 이 필터에 올 때까지 사용자가 인증되지 않았다면, 이 요청은 익명의 사용자가 보낸 것으로 판단할 수 있다.
#   이 익명 사용자에 관한 처리를 하는 필터이다.

## ExceptionTranslationFilter (10/10)
# : 필터 처리 과정에서 인증 예외 또는 인가 예외가 발생한 경우 해당 예외를 잡아서 처리하는 필터이다.


## 카카오 로그인 설정 추가 p745
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.user-name-attribute=id
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me

spring.security.oauth2.client.registration.kakao.client-name=kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect_uri=http://192.168.0.150:8000/login/oauth2/code/kakao

## 카카오api -> REST API키
spring.security.oauth2.client.registration.kakao.client-id=
## 카카오api -> 시크릿키
spring.security.oauth2.client.registration.kakao.client-secret=

## spring.security.oauth2.client.registration.kakao.client-authentication-method=POST 6버전부터 변경.
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email